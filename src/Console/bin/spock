#!/usr/bin/env php
<?php

define('WPSPOCK_MINIMAL_PHP_VERSION', "7.1");

if (version_compare(PHP_VERSION, WPSPOCK_MINIMAL_PHP_VERSION) < 0) {
    echo "\n\033[33;5;82mWarning!!\n";
    echo "\n\033[38;5;82m\t" . 'You must run with PHP version ' . WPSPOCK_MINIMAL_PHP_VERSION . ' or greather';
    echo "\033[0m\n\n";
    exit;

}

/*
|--------------------------------------------------------------------------
| Load WordPress
|--------------------------------------------------------------------------
|
| We have to load the WordPress environment.
|
*/
if (!file_exists(__DIR__ . '/../../../wp-load.php')) {
    echo "\n\033[33;5;82mWarning!!\n";
    echo "\n\033[38;5;82m\t" . 'You must be inside "wp-content/theme/" folders';
    echo "\033[0m\n\n";
    exit;
}

require __DIR__ . '/../../../wp-load.php';

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require __DIR__ . '/vendor/autoload.php';
}

/**
 * @class SpockCommandLine
 */
class SpockCommandLine
{

    /**
     * WP Bones version
     */
    const VERSION = '0.1.2';

    /**
     * Plugin name.
     *
     * @var string
     */
    protected $plginName;

    /**
     * Plugin namespace.
     *
     * @var string
     */
    protected $namespace;

    /**
     * Used for additional kernel command.
     *
     * @var null
     */
    protected $kernel = null;

    /**
     * List of files and folders to skip during the deploy.
     *
     * @var array
     */
    protected $skipWhenDeploy = [];

    /**
     * Base folder during the deploy.
     *
     * @var string
     */
    protected $rootDeploy = '';

    public function __construct()
    {
        $this->handle();
    }

    /**
     * Run subtask.
     * Check argv from console and execute a task.
     *
     */
    protected function handle()
    {
        $argv = $_SERVER['argv'];

        // strip the application name
        array_shift($argv);

        if (empty($argv) || (isset($argv[0]) && "--help" === $argv[0])) {
            $this->help();
        } // Deploy
        elseif ($this->option('deploy')) {
            $this->deploy($argv[1]??false);
        } // Optimize
        elseif ($this->option('optimize')) {
            $this->optimize();
        } // Tinker
        elseif ($this->option('tinker')) {
            $this->tinker();
        } else {
            $extended = false;

            if ($this->kernel) {
                $extended = $this->kernel->handle($argv);
            }

            if (!$extended) {
                $this->info("\nUnknown command! Use --help for commands list\n");
            }
        }
    }

    /*
    |--------------------------------------------------------------------------
    | Internal useful function
    |--------------------------------------------------------------------------
    |
    | Here you will find all internal methods
    |
    */

    protected function help()
    {

        echo '
 __    __  ___   __                  _    
/ / /\ \ \/ _ \ / _\_ __   ___   ___| | __
\ \/  \/ / /_)/ \ \| \'_ \ / _ \ / __| |/ /
 \  /\  / ___/  _\ \ |_) | (_) | (__|   < 
  \/  \/\/      \__/ .__/ \___/ \___|_|\_\
                   |_|                    

    ';

        $this->info("\nSpock Version " . self::VERSION . "\n");
        $this->info("Usage:\n");
        $this->line(" command [options] [arguments]");
        $this->info("\nAvailable commands:");
        $this->line(" deploy                  Create a deploy version");
        $this->line(" optimize                Run composer dump-autoload with -o option");
        $this->line(" tinker                  Interact with your application");

        if ($this->kernel && $this->kernel->hasCommands()) {
            $this->info("Extensions");
            $this->kernel->displayHelp();
        }

        echo "\n\n";
    }

    protected function info($str)
    {
        echo "\033[38;5;213m" . $str;
        echo "\033[0m\n";
    }

    protected function line($str)
    {
        echo "\033[38;5;82m" . $str;
        echo "\033[0m\n";
    }

    protected function option($option)
    {
        $argv = $_SERVER['argv'];

        // strip the application name (bones)
        array_shift($argv);

        return in_array($option, $argv);
    }

    protected function deploy($path)
    {
        $path = rtrim($path, '/');

        if (empty($path)) {
            $path = $this->ask('Enter the complete path of deploy:');
        } elseif ("--help" === $path) {
            $this->line("\nUsage:");
            $this->info("  deploy <path>\n");
            $this->line("Arguments:");
            $this->info("  path\tThe complete path of deploy.");
            exit(0);
        }

        if (!empty($path)) {

            // alternative method to customize the deploy
            @include 'deploy.php';

            // files and folders to skip
            $this->skipWhenDeploy = [
                '/node_modules',
                '/.git',
                '/.gitignore',
                '/.DS_Store',
                '/spock',
                '/deploy.php',
                '/composer.json',
                '/composer.lock',
                '/package.json',
                '/package-lock.json',
                '/yarn.lock',
                '/README.md',
                '/webpack.mix.js',
                '/phpcs.xml.dist',
                '/mix-manifest.json',
            ];

            /**
             * Filter the list of files and folders to skip during the deploy.
             *
             * @param array $array The files and folders are relative to the root of theme.
             */
            $this->skipWhenDeploy = apply_filters('wpspock_console_deploy_skip', $this->skipWhenDeploy);

            $this->rootDeploy = __DIR__;

            $this->xcopy(__DIR__, $path);

            /**
             * Fires when the console deploy is completed.
             *
             * @param mixed  $spock This spock command instance.
             * @param string $path  The deployed path.
             */
            do_action('wpspock_console_deployed', $this, $path);
        }
    }

    /*
    |--------------------------------------------------------------------------
    | Public task
    |--------------------------------------------------------------------------
    |
    | Here you will find all tasks that a user can run from console.
    |
    */

    protected function ask($str, $default = '')
    {

        echo "\n\e[38;5;88m$str" . (empty($default) ? "" : " (default: {$default})") . "\e[0m ";

        $handle = fopen("php://stdin", "r");
        $line   = fgets($handle);

        fclose($handle);

        $line = trim($line, " \n\r");

        return $line ?: $default;
    }

    protected function xcopy($source, $dest, $permissions = 0755)
    {
        // Check for symlinks
        if (is_link($source)) {
            return symlink(readlink($source), $dest);
        }

        // Simple copy for a file
        if (is_file($source)) {
            $this->line("Copying... {$source} to {$dest}");

            return copy($source, $dest);
        }

        // Make destination directory
        if (!is_dir($dest)) {
            mkdir($dest, $permissions);
        }

        // Loop through the folder
        $dir = dir($source);
        while(false !== $entry = $dir->read()) {

            // files and folder to skip
            if ($entry === '.' || $entry === '..' || $this->skip("{$source}/{$entry}")) {
                continue;
            }

            // Deep copy directories
            $this->xcopy("{$source}/{$entry}", "{$dest}/{$entry}", $permissions);
        }

        // Clean up
        $dir->close();

        return true;
    }

    protected function skip($value)
    {
        $single = str_replace($this->rootDeploy, '', $value);

        return in_array($single, $this->skipWhenDeploy);
    }

    protected function optimize()
    {
        $this->line(`composer dump-autoload -o`);
    }

    protected function tinker()
    {
        $eval = $this->ask(">>>");

        try {

            if ($eval == 'exit') {
                exit;
            }

            if (substr($eval, -1) != ';') {
                $eval .= ';';
            }

            $this->line(eval($eval));
        } catch (Exception $e) {
            $this->info(eval($e->getMessage()));
        } finally {
            $this->tinker();
        }
    }

    public static function run()
    {
        $instance = new self;

        return $instance;
    }

    public function deleteDirectory($path)
    {
        $path = rtrim($path, '/');

        $this->info("Delete folder... {$path}");

        array_map(function ($file) {

            if (is_dir($file)) {
                $this->deleteDirectory($file);
            } else {
                $this->info("Removing... {$file}");

                @unlink($file);
            }

        }, glob("{$path}/" . '{,.}[!.,!..]*', GLOB_MARK | GLOB_BRACE));

        @rmdir("{$path}");
    }
}

SpockCommandLine::run();