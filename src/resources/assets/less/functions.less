/**
 * Here you'll find some pre-defined useful less function.
 *
 */

// ClearFix helper
.clearfix() {
	*zoom: 1 !important;

	&:before,
	&:after {
		display: table !important;
		line-height: 0 !important;
		content: "" !important;
	}

	&:after {
		clear: both !important;
	}
}

// Border radius
.border-radius (@radius: 5px) {
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	border-radius: @radius;
}

// Opacity
.opacity (@opacity: 0.5) {
	-webkit-opacity: @opacity;
	-moz-opacity: @opacity;
	opacity: @opacity;
}

// Box shadow
.box-shadow( @shadow ) {
	-webkit-box-shadow: @shadow;
	-moz-box-shadow: @shadow;
	box-shadow: @shadow;
}

// Box sizing
.box-sizing (@type: border-box) {
	-webkit-box-sizing: @type;
	-moz-box-sizing: @type;
	box-sizing: @type;
}

// Transitions
.transition( @transition ) {
	-webkit-transition: @transition;
	-moz-transition: @transition;
	-ms-transition: @transition;
	-o-transition: @transition;
	transition: @transition;
}

// transform
.transform ( @transform) {
	-webkit-transform: @transform;
	-moz-transform: @transform;
	-ms-transform: @transform;
	-o-transform: @transform;
	transform: @transform;
}

// utilities for...loop
.for(@list, @code) {
	& {
		.loop(@i:1) when (@i =< length(@list)) {
			@value: extract(@list, @i);

			@code();

			.loop(@i + 1);
		}

		.loop();
	}
}

.forKey(@list, @code) {
	& {
		.loop(@i:1) when (@i =< length(@list)) {
			@pairs: extract(@list, @i);
			@key: extract(@pairs, 1);
			@value: extract(@pairs, 2);

			@code();

			.loop(@i + 1);
		}

		.loop();
	}
}
